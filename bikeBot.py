import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from datetime import datetime
import pytz
import re

import gspread
from google.oauth2 import service_account

TOKEN = '7653332960:AAGWP4vmKyaoQ-8dYyR9XIm7j0G-9aoHwnE'
ADMIN_ID = 6425885445

SUPPORT_TEXT = (
    "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 255-28-54\n"
    "Telegram: @realBalticBike\n"
    "E-mail: velo.prokat@internet.ru"
)

PHONE_NUMBER = "+7 906 211-29-40"

bike_categories = {
    '–î–µ—Ç—Å–∫–∏–π':     {"hour": 150, "emoji": "üßí"},
    '–ü—Ä–æ–≥—É–ª–æ—á–Ω—ã–π': {"hour": 200, "emoji": "üö≤"},
    '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π':  {"hour": 250, "emoji": "üö¥"},
    '–§—ç—Ç–±–∞–π–∫':     {"hour": 300, "emoji": "üåÑ"},
}

QUANTITY_CHOICES = [1, 2, 3, 4, 5]
user_rent_data = {}

KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

# ---- Google Sheets ----
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = "balticbikebot-8f325aae06ee.json"
SPREADSHEET_ID = '1OeqJkQRkyqlkgPuorni6CQzwjY4RP9rB1sRCdtCL07g'
SHEET_NAME = '–õ–∏—Å—Ç1'

creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
gc = gspread.authorize(creds)
worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

def write_rent_to_sheet(event_type, user_fullname, user_id, phone, start_time, end_time, duration_str, cart, total_price):
    cart_str = "; ".join([f"{bike_categories[cat]['emoji']} {cat}: {qty} —à—Ç." for cat, qty in cart.items()])
    worksheet.append_row([
        event_type,            # "–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã" –∏–ª–∏ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞—Ä–µ–Ω–¥–∞"
        user_fullname,
        str(user_id),
        phone or "",
        start_time.strftime("%d.%m.%Y %H:%M") if start_time else "",
        end_time.strftime("%d.%m.%Y %H:%M") if end_time else "",
        duration_str or "",
        cart_str,
        str(total_price)
    ])

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def categories_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(
                    text=f"{bike_categories[cat]['emoji']} {cat} ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
                )
            ] for cat in bike_categories.keys()
        ] +
        [
            [types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def cart_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )

def during_rent_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],
            [types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def contact_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    )

@dp.message(F.text == "/start")
async def greet(message: types.Message):
    photo = FSInputFile("welcome.png")
    await message.answer_photo(
        photo,
        caption=(
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤–µ–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ BalticBike!</b>\n\n"
            "üåä –ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –ø–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –∫–æ—Å–µ –∏ –ø–æ–±–µ—Ä–µ–∂—å—é –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É¬ª</b>.\n\n"
            "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üö≤"
        ),
        reply_markup=main_menu_keyboard()
    )

@dp.message(F.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def restart_bot(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        await message.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É!")
        return
    keyboard = main_menu_keyboard()
    await message.answer(
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.",
        reply_markup=keyboard
    )

@dp.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        keyboard = during_rent_keyboard()
    elif data and data.get("cart"):
        keyboard = categories_keyboard()
    else:
        keyboard = main_menu_keyboard()
    await message.answer(
        SUPPORT_TEXT,
        reply_markup=keyboard
    )

@dp.message(F.text == "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")
async def start_rent_button(message: types.Message):
    user_id = message.from_user.id
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)

@dp.message(lambda m: any(m.text and m.text.startswith(bike_categories[cat]['emoji']) for cat in bike_categories))
async def select_category(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_rent_data:
        await start_rent_button(message)
        return
    data = user_rent_data[user_id]
    if data["is_renting"]:
        await message.answer("–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç.", reply_markup=during_rent_keyboard())
        return

    cat_name = None
    for cat, info in bike_categories.items():
        pattern = f"^{re.escape(info['emoji'])} {cat}"
        if re.match(pattern, message.text):
            cat_name = cat
            break
    if not cat_name:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data["awaiting_quantity"] = True
    data["last_category"] = cat_name

    qty_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=str(qty)) for qty in QUANTITY_CHOICES],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"–°–∫–æ–ª—å–∫–æ '{cat_name}' –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=qty_keyboard
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_category(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["awaiting_quantity"] = False
        user_rent_data[user_id]["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id]["awaiting_quantity"])
async def select_quantity(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    if message.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await back_to_category(message)
        return
    try:
        qty = int(message.text)
        if qty not in QUANTITY_CHOICES:
            raise ValueError
    except ValueError:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!")
        return
    cat = data["last_category"]
    data["cart"][cat] = data["cart"].get(cat, 0) + qty
    data["awaiting_quantity"] = False
    data["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {qty} '{cat}' –≤–µ–ª–æ—Å–∏–ø–µ–¥(–∞).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ª–∏–±–æ '–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ–∫–∞—Ç—É.\n"
        "–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É.",
        reply_markup=keyboard
    )

@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["cart"]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=categories_keyboard())
        return
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)" 
        for cat, cnt in data["cart"].items()
    ])
    await message.answer(f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}", reply_markup=cart_keyboard())

@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["cart"] = {}
        user_rent_data[user_id]["is_renting"] = False
        user_rent_data[user_id]["start_time"] = None
    keyboard = categories_keyboard()
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=keyboard)

@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É")
async def start_rent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["cart"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥.")
        return
    if not data["phone"] and not data["asked_phone"]:
        data["asked_phone"] = True
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=contact_keyboard())
        return

    data["start_time"] = datetime.now(KALININGRAD_TZ)
    data["is_renting"] = True
    keyboard = during_rent_keyboard()
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])

    total_hour_price = 0
    for cat, qty in data["cart"].items():
        total_hour_price += bike_categories[cat]["hour"] * qty

    # Google Sheets –∑–∞–ø–∏—Å—å - –ù–ê–ß–ê–õ–û –∞—Ä–µ–Ω–¥—ã
    write_rent_to_sheet(
        "–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã",
        message.from_user.full_name,
        message.from_user.id,
        data.get('phone'),
        data["start_time"],
        None,
        "",
        data["cart"],
        total_hour_price
    )

    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–ê–ß–ê–õ–ê–°–¨ –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {datetime.now(KALININGRAD_TZ).strftime('%H:%M')}\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞:\n{cart_str}"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–Ω–∞—á–∞–ª–æ): {e}")

    await message.answer(
        f"–í—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏:\n{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∑–∞ 1 —á–∞—Å: {total_hour_price} —Ä—É–±.</b>\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É'.",
        reply_markup=keyboard
    )

@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")
async def finish_rent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["is_renting"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞—Ä–µ–Ω–¥—É.")
        return
    end_time = datetime.now(KALININGRAD_TZ)
    start_time = data["start_time"]
    duration = end_time - start_time
    minutes = int(duration.total_seconds() // 60)
    if minutes == 0:
        minutes = 1

    start_str = start_time.strftime("%H:%M")
    end_str = end_time.strftime("%H:%M")
    hours_part = minutes // 60
    minutes_part = minutes % 60
    if hours_part > 0:
        ride_time = f"{hours_part} —á {minutes_part} –º–∏–Ω"
    else:
        ride_time = f"{minutes_part} –º–∏–Ω"
    period_str = f"{start_str} ‚Äî {end_str}"

    total_price = 0
    lines = []
    for cat, qty in data["cart"].items():
        hour_price = bike_categories[cat]["hour"]
        emoji = bike_categories[cat]['emoji']

        if minutes < 60:
            minute_price = hour_price / 60
            price = int(minute_price * minutes)
            line = f"{emoji} <b>{cat}</b>: {qty} —à—Ç. √ó {minutes} –º–∏–Ω √ó {minute_price:.2f}‚ÇΩ = {price * qty}‚ÇΩ"
        else:
            hours = minutes // 60
            remain = minutes % 60
            if remain > 45:
                hours += 1
            price = hour_price * hours
            line = f"{emoji} <b>{cat}</b>: {qty} —à—Ç. √ó {hours} —á √ó {hour_price}‚ÇΩ = {price * qty}‚ÇΩ"
        lines.append(line)
        total_price += price * qty

    keyboard = main_menu_keyboard()
    await message.answer(
        f"–í—ã –∫–∞—Ç–∞–ª–∏—Å—å {minutes} –º–∏–Ω—É—Ç(—ã) –Ω–∞:\n"
        + "\n".join(lines) +
        "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <u>{total_price} —Ä—É–±.</u></b>\n\n"
        "<b>üí∏ –û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –ø–æ –°–ë–ü</b>\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä:\n"
        f"<code>{PHONE_NUMBER}</code>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∂–∏—Ç–µ —á–µ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.",
        reply_markup=keyboard
    )

    # Google Sheets –∑–∞–ø–∏—Å—å - –û–ö–û–ù–ß–ê–ù–ò–ï –∞—Ä–µ–Ω–¥—ã
    write_rent_to_sheet(
        "–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞—Ä–µ–Ω–¥–∞",
        message.from_user.full_name,
        message.from_user.id,
        data.get('phone'),
        start_time,
        end_time,
        f"{period_str} ({ride_time})",
        data["cart"],
        total_price
    )

    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è –ø—Ä–æ–∫–∞—Ç–∞: {ride_time}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_str}\n"
            + "\n".join(lines) +
            f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.</b>"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ–∫–æ–Ω—á–∞–Ω–∏–µ): {e}")

    if user_id in user_rent_data:
        del user_rent_data[user_id]

@dp.message(F.content_type == types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã.")
        return
    data["phone"] = message.contact.phone_number
    await start_rent(message)

@dp.message(F.text == "/myid")
async def my_id(message: types.Message):
    await message.answer(f"–í–∞—à user_id: {message.from_user.id}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
